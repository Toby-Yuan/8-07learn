// LOCK
read lock --> 可以讀不可以寫
write lock --> 不可讀不可寫

// 語法
LOCK TABLE table_name read;
UNLOCK TABLES;
--> UNLOCK 之後會自動執行(依照執行順序)

--> 多個鎖定
LOCK TABLE table_name1 read, table_name2 write, ... ;

--> 多個使用者要同時LOCK時，write的權重比較高

// 應用 : 多個使用者購買物品
S.T.
    SELECT -> read lock;
    UPDATE -> write lock;
COMMIT -> UNLOCK;

lock in share mode ??

S.T.
    SELECT -> write read FOR UPDATE;
COMMIT -> UNLOCK;
--> 修改期間資料不會被讀取，被讀取的是最新的完成資料(commit過的)
--> FOR UPDATE : 等待另一邊更新完成

// START TRANSITION
START TRANSITION
    |
    |
    |
COMMIT/ROLLBACK(寫入/捨棄)

level repeatable read;
--> 外面發生什麼事都不管

// 備份
mysqldump -uroot db_name > (希望備份的檔案位置以及檔名)

mysqldump -uroot --databases db_name > (希望備份的檔案位置以及檔名)

// 匯出資料表
select categoryId, categoryName 
  into outfile '檔案位置以及檔名' 
  [fields terminated by ',' optionally enclosed by '"']
  lines terminated by '\r\n'
  from categories;

--> fields terminated by ',' optionally enclosed by '"' :
    檔案匯出時，編號和資料中間會有, 且文字用" "包起來，數字不會

// 匯入資料表
load data infile '檔案位置以及檔名'
  replace
  into table categories
  LINES TERMINATED BY '\r\n';
  -- ignore 2 lines;

--> replace : 重複的覆蓋
--> ignore : 重複的忽略
--> ignore int lines : 先跳過幾行再處理

point : 匯入時， 要先匯入一個相同結構的暫時資料表